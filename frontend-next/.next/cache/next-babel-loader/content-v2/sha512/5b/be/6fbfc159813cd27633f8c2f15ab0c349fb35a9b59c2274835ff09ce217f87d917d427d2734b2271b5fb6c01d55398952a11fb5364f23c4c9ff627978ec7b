{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/garcia/Desktop/Move.it/frontend-next/src/contexts/CountdownContext.tsx\";\n// React\nimport { createContext, useContext, useState, useEffect } from \"react\"; // Local\n\nimport { ChallengesContext } from \"./ChallengesContext\"; // javascript\n\nlet countdownTimeout;\nexport const CountdownContext = /*#__PURE__*/createContext({});\nexport function CountdownProvider({\n  children\n}) {\n  const {\n    startNewChallenge\n  } = useContext(ChallengesContext);\n  const {\n    0: time,\n    1: setTime\n  } = useState(.1 * 60);\n  const {\n    0: isActive,\n    1: setIsActive\n  } = useState(false);\n  const {\n    0: hasFinished,\n    1: setHasFinished\n  } = useState(false);\n  const minutes = Math.floor(time / 60);\n  const seconds = time % 60;\n\n  function startCountdown() {\n    setIsActive(true);\n  }\n\n  function resertCountdown() {\n    clearTimeout(countdownTimeout);\n    setIsActive(false);\n    setTime(.1 * 60);\n  }\n\n  useEffect(() => {\n    if (isActive && time > 0) {\n      countdownTimeout = setTimeout(() => {\n        setTime(time - 1);\n      }, 1000);\n    } else if (isActive && time == 0) {\n      setHasFinished(true);\n      setIsActive(false);\n      startNewChallenge();\n    }\n  }, [isActive, time]);\n  return /*#__PURE__*/_jsxDEV(CountdownContext.Provider, {\n    value: {\n      minutes,\n      seconds,\n      hasFinished,\n      isActive,\n      // Functions\n      startCountdown,\n      resertCountdown\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/home/garcia/Desktop/Move.it/frontend-next/src/contexts/CountdownContext.tsx"],"names":["createContext","useContext","useState","useEffect","ChallengesContext","countdownTimeout","CountdownContext","CountdownProvider","children","startNewChallenge","time","setTime","isActive","setIsActive","hasFinished","setHasFinished","minutes","Math","floor","seconds","startCountdown","resertCountdown","clearTimeout","setTimeout"],"mappings":";;AAAA;AACA,SACEA,aADF,EAGEC,UAHF,EAIEC,QAJF,EAKEC,SALF,QAMO,OANP,C,CAQA;;AACA,SAASC,iBAAT,QAAkC,qBAAlC,C,CAEA;;AACA,IAAIC,gBAAJ;AAeA,OAAO,MAAMC,gBAAgB,gBAAGN,aAAa,CAAC,EAAD,CAAtC;AAEP,OAAO,SAASO,iBAAT,CAA2B;AAAEC,EAAAA;AAAF,CAA3B,EAAiE;AACtE,QAAM;AAAEC,IAAAA;AAAF,MAAwBR,UAAU,CAACG,iBAAD,CAAxC;AAEA,QAAM;AAAA,OAACM,IAAD;AAAA,OAAOC;AAAP,MAAkBT,QAAQ,CAAC,KAAK,EAAN,CAAhC;AACA,QAAM;AAAA,OAACU,QAAD;AAAA,OAAWC;AAAX,MAA0BX,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM;AAAA,OAACY,WAAD;AAAA,OAAcC;AAAd,MAAgCb,QAAQ,CAAC,KAAD,CAA9C;AAEA,QAAMc,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWR,IAAI,GAAG,EAAlB,CAAhB;AACA,QAAMS,OAAO,GAAGT,IAAI,GAAG,EAAvB;;AAEA,WAASU,cAAT,GAA0B;AACxBP,IAAAA,WAAW,CAAC,IAAD,CAAX;AACD;;AAED,WAASQ,eAAT,GAA2B;AACzBC,IAAAA,YAAY,CAACjB,gBAAD,CAAZ;AACAQ,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAF,IAAAA,OAAO,CAAC,KAAK,EAAN,CAAP;AACD;;AAEDR,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIS,QAAQ,IAAIF,IAAI,GAAG,CAAvB,EAA0B;AACxBL,MAAAA,gBAAgB,GAAGkB,UAAU,CAAC,MAAM;AAClCZ,QAAAA,OAAO,CAACD,IAAI,GAAG,CAAR,CAAP;AACD,OAF4B,EAE1B,IAF0B,CAA7B;AAGD,KAJD,MAIO,IAAIE,QAAQ,IAAIF,IAAI,IAAI,CAAxB,EAA2B;AAChCK,MAAAA,cAAc,CAAC,IAAD,CAAd;AACAF,MAAAA,WAAW,CAAC,KAAD,CAAX;AACAJ,MAAAA,iBAAiB;AAClB;AACF,GAVQ,EAUN,CAACG,QAAD,EAAWF,IAAX,CAVM,CAAT;AAYA,sBACE,QAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAE;AAChCM,MAAAA,OADgC;AAEhCG,MAAAA,OAFgC;AAGhCL,MAAAA,WAHgC;AAIhCF,MAAAA,QAJgC;AAMhC;AACAQ,MAAAA,cAPgC;AAQhCC,MAAAA;AARgC,KAAlC;AAAA,cAUGb;AAVH;AAAA;AAAA;AAAA;AAAA,UADF;AAcD","sourcesContent":["// React\nimport {\n  createContext,\n  ReactNode,\n  useContext,\n  useState,\n  useEffect\n} from \"react\";\n\n// Local\nimport { ChallengesContext } from \"./ChallengesContext\";\n\n// javascript\nlet countdownTimeout: NodeJS.Timeout\n\ninterface CountdownContextData {\n  minutes: number\n  seconds: number\n  hasFinished: boolean\n  isActive: boolean\n  startCountdown: () => void\n  resertCountdown: () => void\n}\n\ninterface CountdownProviderProps {\n  children: ReactNode\n}\n\nexport const CountdownContext = createContext({} as CountdownContextData)\n\nexport function CountdownProvider({ children }: CountdownProviderProps) {\n  const { startNewChallenge } = useContext(ChallengesContext)\n\n  const [time, setTime] = useState(.1 * 60)\n  const [isActive, setIsActive] = useState(false)\n  const [hasFinished, setHasFinished] = useState(false)\n\n  const minutes = Math.floor(time / 60)\n  const seconds = time % 60\n\n  function startCountdown() {\n    setIsActive(true)\n  }\n\n  function resertCountdown() {\n    clearTimeout(countdownTimeout)\n    setIsActive(false)\n    setTime(.1 * 60)\n  }\n\n  useEffect(() => {\n    if (isActive && time > 0) {\n      countdownTimeout = setTimeout(() => {\n        setTime(time - 1)\n      }, 1000)\n    } else if (isActive && time == 0) {\n      setHasFinished(true)\n      setIsActive(false)\n      startNewChallenge()\n    }\n  }, [isActive, time])\n\n  return (\n    <CountdownContext.Provider value={{\n      minutes,\n      seconds,\n      hasFinished,\n      isActive,\n\n      // Functions\n      startCountdown,\n      resertCountdown\n    }}>\n      {children}\n    </CountdownContext.Provider>\n  )\n}"]},"metadata":{},"sourceType":"module"}