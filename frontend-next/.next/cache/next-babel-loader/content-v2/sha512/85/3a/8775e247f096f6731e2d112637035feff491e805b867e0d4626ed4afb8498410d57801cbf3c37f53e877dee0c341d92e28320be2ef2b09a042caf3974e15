{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/garcia/Desktop/Move.it/frontend-next/src/contexts/ChallengesContext.tsx\";\n// React\nimport { createContext, useState } from 'react'; // Local\n\nimport challenges from '../../challenges.json';\nexport const ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider({\n  children\n}) {\n  const {\n    0: level,\n    1: setLevel\n  } = useState(0);\n  const {\n    0: currentExperience,\n    1: setCurrentExperience\n  } = useState(0);\n  const {\n    0: challengesCompleted,\n    1: setChallengesCompleted\n  } = useState(0);\n  const {\n    0: activeChallenge,\n    1: setActiveChallenge\n  } = useState(null);\n  const experienceToNextLevel = Math.pow((level + 1) * 4, 2);\n\n  function startNewChallenge() {\n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    const challenge = challenges[randomChallengeIndex];\n    setActiveChallenge(challenge);\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  function completeChallenge() {}\n\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level,\n      currentExperience,\n      challengesCompleted,\n      activeChallenge,\n      experienceToNextLevel,\n      // Funções\n      startNewChallenge,\n      resetChallenge,\n      completeChallenge\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/home/garcia/Desktop/Move.it/frontend-next/src/contexts/ChallengesContext.tsx"],"names":["createContext","useState","challenges","ChallengesContext","ChallengesProvider","children","level","setLevel","currentExperience","setCurrentExperience","challengesCompleted","setChallengesCompleted","activeChallenge","setActiveChallenge","experienceToNextLevel","Math","pow","startNewChallenge","randomChallengeIndex","floor","random","length","challenge","resetChallenge","completeChallenge"],"mappings":";;AAAA;AACA,SAASA,aAAT,EAAmCC,QAAnC,QAAmD,OAAnD,C,CAEA;;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AAuBA,OAAO,MAAMC,iBAAiB,gBAAGH,aAAa,CAAC,EAAD,CAAvC;AAEP,OAAO,SAASI,kBAAT,CAA4B;AAAEC,EAAAA;AAAF,CAA5B,EAAmE;AACxE,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBN,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM;AAAA,OAACO,iBAAD;AAAA,OAAoBC;AAApB,MAA4CR,QAAQ,CAAC,CAAD,CAA1D;AACA,QAAM;AAAA,OAACS,mBAAD;AAAA,OAAsBC;AAAtB,MAAgDV,QAAQ,CAAC,CAAD,CAA9D;AAEA,QAAM;AAAA,OAACW,eAAD;AAAA,OAAkBC;AAAlB,MAAwCZ,QAAQ,CAAC,IAAD,CAAtD;AAEA,QAAMa,qBAAqB,GAAGC,IAAI,CAACC,GAAL,CAAS,CAACV,KAAK,GAAG,CAAT,IAAc,CAAvB,EAA0B,CAA1B,CAA9B;;AAEA,WAASW,iBAAT,GAA6B;AAC3B,UAAMC,oBAAoB,GAAGH,IAAI,CAACI,KAAL,CAAWJ,IAAI,CAACK,MAAL,KAAgBlB,UAAU,CAACmB,MAAtC,CAA7B;AACA,UAAMC,SAAS,GAAGpB,UAAU,CAACgB,oBAAD,CAA5B;AAEAL,IAAAA,kBAAkB,CAACS,SAAD,CAAlB;AACD;;AAED,WAASC,cAAT,GAA0B;AACxBV,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACD;;AAED,WAASW,iBAAT,GAA6B,CAE5B;;AAED,sBACE,QAAC,iBAAD,CAAmB,QAAnB;AACE,IAAA,KAAK,EAAE;AACLlB,MAAAA,KADK;AAELE,MAAAA,iBAFK;AAGLE,MAAAA,mBAHK;AAILE,MAAAA,eAJK;AAKLE,MAAAA,qBALK;AAOL;AACAG,MAAAA,iBARK;AASLM,MAAAA,cATK;AAULC,MAAAA;AAVK,KADT;AAAA,cAcGnB;AAdH;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD","sourcesContent":["// React\nimport { createContext, ReactNode, useState } from 'react'\n\n// Local\nimport challenges from '../../challenges.json'\n\ninterface Challenge {\n  type: 'body' | 'eye'\n  description: string\n  amount: number\n}\n\ninterface ChallengesContextData {\n  level: number\n  currentExperience: number\n  challengesCompleted: number\n  activeChallenge: Challenge\n  experienceToNextLevel: number\n  startNewChallenge: () => void\n  resetChallenge: () => void\n  completeChallenge: () => void\n}\n\ninterface ChallengesProviderProps {\n  children: ReactNode\n}\n\nexport const ChallengesContext = createContext({} as ChallengesContextData)\n\nexport function ChallengesProvider({ children }: ChallengesProviderProps) {\n  const [level, setLevel] = useState(0)\n  const [currentExperience, setCurrentExperience] = useState(0)\n  const [challengesCompleted, setChallengesCompleted] = useState(0)\n\n  const [activeChallenge, setActiveChallenge] = useState(null)\n\n  const experienceToNextLevel = Math.pow((level + 1) * 4, 2)\n\n  function startNewChallenge() {\n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length)\n    const challenge = challenges[randomChallengeIndex]\n\n    setActiveChallenge(challenge)\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null)\n  }\n\n  function completeChallenge() {\n\n  }\n\n  return (\n    <ChallengesContext.Provider\n      value={{\n        level,\n        currentExperience,\n        challengesCompleted,\n        activeChallenge,\n        experienceToNextLevel,\n\n        // Funções\n        startNewChallenge,\n        resetChallenge,\n        completeChallenge,\n      }}\n    >\n      {children}\n    </ChallengesContext.Provider>\n  )\n}\n\n"]},"metadata":{},"sourceType":"module"}